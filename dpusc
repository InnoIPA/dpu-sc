#!/usr/bin/python3
# Copyright (c) 2022 Innodisk Crop.
# 
# This software is released under the MIT License.
# https://opensource.org/licenses/MIT


import os
import argparse
import time
import numpy as np
import queue
import logging
import datetime
import sys

from mod.predictor import PREDICTOR
from mod.util import open_json

from simple_term_menu import TerminalMenu

print(f"""
 ____  ____  _   _      ____   ____ 
|  _ \|  _ \| | | |    / ___| / ___|
| | | | |_) | | | |____\___ \| |    
| |_| |  __/| |_| |_____|__) | |___ 
|____/|_|    \___/     |____/ \____|
                                    
Discovery Personal Universe - Super Code
""")
                                    


DISPLAY_CARD_PATH = '/dev/dri/by-path/platform-fd4a0000.zynqmp-display-card'

version = "2.0.0"
date = datetime.date.today()

DISPLAY = "DISPLAY"
WIDTH   = "WIDTH"
HEIGHT  = "HEIGHT"
divider = '------------------------------------'
equal   = '===================================='


def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('-c', '--camera', type=str, help='Camera type, default is /dev/video0')
    ap.add_argument('-i', '--image' , type=str, help='Path to a image which you would like to inference.')
    ap.add_argument('-t', '--target', type=str, help='Output type, default is dp')
    ap.add_argument('-v', '--video' , type=str, help='Path to a video which you would like to inference.')
    ap.add_argument('-x', '--xmodel', type=str, default='yolo', help='Type of xmodel, default is yolo')
    ap.add_argument('-l', '--lpr'   , type=str, help='Enable LPR mode. This is base on yolo object detection.')
    args = ap.parse_args()
    
    logging.info(equal)
    logging.basicConfig(level=logging.INFO)
    logging.info(" Command line options:")
    logging.info(" Version: {}".format(version))
    logging.info(" Date:    {}".format(date))

    '''select the application'''
    logging.info(equal)
    logging.info("Please select the desired application for use...")
    options = ["cifar10_resnet18_DEMO", "Object detection", "Automatic number-plate recognition","Quit"]
    terminal_menu = TerminalMenu(options)
    menu_entry_index = terminal_menu.show()
    selection = options[menu_entry_index]
    if selection == "cifar10_resnet18_DEMO":
        logging.info(' --model     : {}'.format('cnn'))
        cfg = open_json('cfg/cifar10.json')
        pred = PREDICTOR(args, cfg)
        pred.init_model = pred.init_cnn
        pred.run_model = pred.run_cnn
    elif selection == "Object detection":
        logging.info(' --model     : {}'.format('yolo'))
        cfg = open_json('cfg/Object_detection.json')
        pred = PREDICTOR(args, cfg)
        pred.init_model = pred.init_yolo
        pred.run_model = pred.run_yolo
    elif selection == "Automatic number-plate recognition":
        logging.info(' --lpr     : {}'.format('enable'))
        cfg = open_json('cfg/ANPR.json')
        pred = PREDICTOR(args, cfg)
        args.lpr = 'enable'
        pred.init_model = pred.init_yolo
        pred.init_model_LPR = pred.init_lpr
        pred.run_model = pred.run_yolo_lpr
    elif selection == "Quit":
        quit()




    ''' Select Input '''
    logging.info(equal)
    logging.info("Please select the input source...")
    options = ["camera", "image", "video"]
    terminal_menu = TerminalMenu(options)
    menu_entry_index = terminal_menu.show()
    selection = options[menu_entry_index]
    if selection == "camera":
        print("Enter your CAMERA Path")
        args.camera = input()
        logging.info(' --input     : {}'.format('web-cam'))
        pred.get_frame = pred.cam_get
    elif selection == "image":
        print("Enter your IMAGE Path")
        args.image = input()
        logging.info(' --input     : {}'.format('image'))
        pred.get_frame = pred.image_get
    elif selection == "video":
        print("Enter your VIDEO Path")
        args.video = input()
        logging.info(' --input     : {}'.format('video'))
        pred.get_frame = pred.video_get
        
    ''' Select Output '''
    logging.info(equal)
    logging.info("Please select the output...")
    options = ["dp", "image", "video"]
    terminal_menu = TerminalMenu(options)
    menu_entry_index = terminal_menu.show()
    selection = options[menu_entry_index]
    if selection == "dp":
        if not os.path.exists(DISPLAY_CARD_PATH):
            logging.info('Error: zynqmp-display device is not ready.')
            return

        ''' Resolution check '''
        width = int(pred.cfg[DISPLAY][WIDTH])
        height = int(pred.cfg[DISPLAY][HEIGHT])
        
        resolution = "{}x{}".format(width, height)
        all_res = os.popen("modetest -M xlnx -c| awk '/name refresh/ {f=1;next}  /props:/{f=0;} f{print $1 \"@\" $2}'").read()
        
        if all_res.find(resolution) == -1:
            os.environ["DISPLAY"] = ":0"

        logging.info(' --output    : {}'.format('dp'))
        pred.output = pred.dp_out
    elif selection == "image":
        logging.info(' --output    : {}'.format('image'))
        pred.output = pred.image_out

    elif selection == "video":
        logging.info(' --output    : {}'.format('video'))
        pred.output = pred.video_out

    
    pred.predict()

if __name__ == '__main__':
    main()